version: 2.1
orbs:
   slack: circleci/slack@4.10.1

executors:
  app-executor:
    docker:
      - image: cimg/node:lts
    working_directory: ~/repo

aliases:
  - &show-current-branch-name
    run:
      name: Show Current Branch Name
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
     restore_cache:
       keys:
         - app-{{ checksum "package.json" }}	
         - app-
  - &install-dependencies
    run:
      name: Install Dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI 
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python2-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build Successful"
  - &slack-notice-pass
    slack/notify:
          event: pass
          template: basic_success_1
  - &slack-notice-fail
    slack/notify:
          event: pass
          template: basic_fail_1

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - *slack-notice-pass
      - *slack-notice-fail

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run Linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run Prettier Check
          command: npm run prettier:check

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_STAGING} --delete
            else 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_DEV} --delete
            fi
      - *slack-notice-pass
      - *slack-notice-fail

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CURENT_BRANCH}" == "master" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${PROD_DISTRIBUTION_ID} --paths /\*
            elif [ "${CURENT_BRANCH}" == "staging" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${STG_DISTRIBUTION_ID} --paths /\*
            else 
              aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
            fi
      - *slack-notice-pass
      - *slack-notice-fail

workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
#      - prettier:
#          requires:
#            - build
#          filters:
#            branches:
#              only:
#                - develop
#                - staging
#                - master
      - deploy-to-aws-s3:
          requires:
            - linting
          filters:
            branches:
              only:
                - develop
                - staging
                - master
          context:
            - slack-secrets
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
          context:
            - slack-secrets
